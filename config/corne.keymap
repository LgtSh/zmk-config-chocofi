/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


//THUMBS
// #define THMB1   LT(_NUMS, KC_TAB)
// #define THMB2   &mt LSFT RET
// #define THMB3   LT(_NUMS, KC_SPC)
// #define THMB4   LT(_SYM, KC_BSPC)


#define LC_A &mt LCTRL A



/ {
        keymap {
                compatible = "zmk,keymap";



                default_layer {  // layer 1 
// -----------------------------------------------------------------------------------------
// | NONE |  B  |  Y  |  O  |  U  |  '  |   |  Q  |  L   |  D  |  W  |  V  | NONE |
// | NONE |  C  |  I  |  E  |  A  |  ,  |   |  Z  |  H   |  T  |  S  |  N  | NONE |
// | NONE |  G  |  X  |  J  |  K  |  .  |   |  -  |  R   |  M  |  F  |  P  | NONE |
//                    | LWR | TAB | ENT |   | SPC | BSPC | RSE |
                        bindings = <
   &none &kp B  &kp Y  &kp O  &kp U  &kp SQT       &kp Q     &kp L  &kp D  &kp W  &kp V    &none
   &none &kp C  &kp I  &kp E  &kp A  &kp COMMA     &kp Z     &kp H  &kp T  &kp S  &kp N    &none
   &none &kp G  &kp X  &kp J  &kp K  &kp DOT       &kp MINUS &kp R  &kp M  &kp F  &kp P    &none
                  &mo 1 &kp TAB &mt LSFT RET       &kp SPACE &kp BSPC &mo 2 
//, THMB1      , THMB2             , THMB3      , THMB4      ),
                        >;
                };


/* 
                num_layer {
// -----------------------------------------------------------------------------------------
// | NONE |  ~   |  &   |  *   | '|'  |  =   |       |  +   |  7   |  8   |  9   |tool-/ | NONE |
// | NONE |  :   |  $   |  %   |  ^   |  ?   |       |  .   |  4   |  5   |  6   |  -    | NONE |
// | NONE | BSPC |  !   |  @   |  #   | DEL  |       |  0   |  1   |  2   |  3   |  *    | NONE |
//                      |      |      |      |       |      |      |      |
                        bindings = <
   &none &kp TILDE &kp AMPS  &kp STAR   &kp PIPE  &kp EQUAL       &kp PPLS  &kp 7  &kp 8  &kp 9  &kp V    &none
   &none &kp COLON &kp DLLR  &kp PRCNT  &kp CARET &kp QMARK       &kp DOT   &kp 4  &kp 5  &kp 6  &kp N    &none
   &none &kp BSPC  &kp EXCL  &kp AT     &kp HASH  &kp DEL         &kp 0     &kp 1  &kp 2  &kp 3  &kp P    &none
//, _______    , _______           , _______    , THMB3A    ),
                             &trans     &trans    &trans          &trans    &trans &trans
                        >;
                };



                func_layer {
// -----------------------------------------------------------------------------------------
// | NONE |  PSCRN  |  F12  |  ALT  |  CTL  |  ESC  |                  |       |   F7  |   F8  |   F9  |  F12  | NONE |
// | NONE |LA(PSCRN)|       |  PGUP |  HOME |       |                  |       |   F4  |   F5  |   F6  |  F11  | NONE |
// | NONE |         |       |  PGDN |       |       |                  |       |   F1  |   F2  |   F3  |  F10  | NONE |
//                          |       |       |       |                  |       |       |       |
                        bindings = <
    &none &kp PSCRN     &kp F12   &sk LALT   &sk LCTL    &kp ESC       &none   &kp F7  &kp F8  &kp F9  &kp F12    &none
    &none &kp LA(PSCRN) &trans    &kp PGUP   &kp HOME    &none         &none   &kp F4  &kp F5  &kp F6  &kp F11    &none
    &none &none         &none     &kp PGDN   &kp END     &none         &none   &kp F1  &kp F2  &kp F3  &kp F10    &none
                                  &mo 2      &kp LA(TAB) &kp LC(V)
	[_FUNC] = LAYOUT(      // 4
  KC_PSCR      , KC_F12    , OSM_ALT      , OSM_CTL    , KC_ESC            , KC_NO      , KC_F7    , KC_F8     , KC_F9     , KC_F12
, LALT(KC_PSCR), _______   , KC_PGUP      , KC_HOME    , KC_NO             , KC_NO      , KC_F4    , KC_F5     , KC_F6     , KC_F11
, KC_NO        , KC_NO     , KC_PGDN      , KC_END     , KC_NO             , KC_NO      , KC_F1    , KC_F2     , KC_F3     , KC_F10
                                          , KC_ATAB    , LCTL(KC_V)        , KC_NO      , KC_NO      ),


*/







                lower_layer {  // layer 2
// -----------------------------------------------------------------------------------------
// | NONE |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | NONE |
// | NONE | BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     | NONE |
// | NONE |     |     |     |     |     |   |     |     |     |     |     | NONE |
//                    |     |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &none
   &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &none
   &none &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &none
                          	        &trans     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
                        >;
                };

                raise_layer {  // layer 3
// -----------------------------------------------------------------------------------------
// | NONE |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | NONE |
// | NONE |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  | NONE |
// | NONE |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" | NONE |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &none &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &none
   &none &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &none
   &none &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &none
                    	     &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };

        };
};
